// Code generated by sqlc. DO NOT EDIT.
// source: company.sql

package company

import (
	"context"

	"github.com/google/uuid"
)

const createCompany = `-- name: CreateCompany :one
INSERT INTO companies (company_id,
                       company_address_id,
                       name,
                       phone_number)
VALUES ($1, $2, $3, $4)
RETURNING id, company_id, company_address_id, name, phone_number
`

type CreateCompanyParams struct {
	CompanyID        uuid.UUID `json:"companyID"`
	CompanyAddressID uuid.UUID `json:"companyAddressID"`
	Name             string    `json:"name"`
	PhoneNumber      string    `json:"phoneNumber"`
}

func (q *Queries) CreateCompany(ctx context.Context, arg CreateCompanyParams) (Companies, error) {
	row := q.queryRow(ctx, q.createCompanyStmt, createCompany,
		arg.CompanyID,
		arg.CompanyAddressID,
		arg.Name,
		arg.PhoneNumber,
	)
	var i Companies
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.CompanyAddressID,
		&i.Name,
		&i.PhoneNumber,
	)
	return i, err
}

const createCompanyAddress = `-- name: CreateCompanyAddress :one
INSERT INTO company_addresses (company_address_id,
                               postal_code,
                               street,
                               number,
                               address_complement,
                               neighbourhood,
                               city,
                               state)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, company_address_id, postal_code, street, number, address_complement, neighbourhood, city, state
`

type CreateCompanyAddressParams struct {
	CompanyAddressID  uuid.UUID `json:"companyAddressID"`
	PostalCode        string    `json:"postalCode"`
	Street            string    `json:"street"`
	Number            string    `json:"number"`
	AddressComplement string    `json:"addressComplement"`
	Neighbourhood     string    `json:"neighbourhood"`
	City              string    `json:"city"`
	State             string    `json:"state"`
}

func (q *Queries) CreateCompanyAddress(ctx context.Context, arg CreateCompanyAddressParams) (CompanyAddresses, error) {
	row := q.queryRow(ctx, q.createCompanyAddressStmt, createCompanyAddress,
		arg.CompanyAddressID,
		arg.PostalCode,
		arg.Street,
		arg.Number,
		arg.AddressComplement,
		arg.Neighbourhood,
		arg.City,
		arg.State,
	)
	var i CompanyAddresses
	err := row.Scan(
		&i.ID,
		&i.CompanyAddressID,
		&i.PostalCode,
		&i.Street,
		&i.Number,
		&i.AddressComplement,
		&i.Neighbourhood,
		&i.City,
		&i.State,
	)
	return i, err
}

const deleteCompany = `-- name: DeleteCompany :exec
DELETE
FROM companies
WHERE company_id = $1
`

func (q *Queries) DeleteCompany(ctx context.Context, companyID uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteCompanyStmt, deleteCompany, companyID)
	return err
}

const getCompanyByID = `-- name: GetCompanyByID :one
SELECT id, company_id, company_address_id, name, phone_number
FROM companies
WHERE company_id = $1
LIMIT 1
`

func (q *Queries) GetCompanyByID(ctx context.Context, companyID uuid.UUID) (Companies, error) {
	row := q.queryRow(ctx, q.getCompanyByIDStmt, getCompanyByID, companyID)
	var i Companies
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.CompanyAddressID,
		&i.Name,
		&i.PhoneNumber,
	)
	return i, err
}

const getCompanyDetailsByID = `-- name: GetCompanyDetailsByID :one
SELECT c.id, company_id, c.company_address_id, name, phone_number, ca.id, ca.company_address_id, postal_code, street, number, address_complement, neighbourhood, city, state
FROM companies c
         INNER JOIN company_addresses ca
                    ON c.company_address_id = ca.company_address_id
WHERE c.company_id = $1
LIMIT 1
`

type GetCompanyDetailsByIDRow struct {
	ID                 int64     `json:"id"`
	CompanyID          uuid.UUID `json:"companyID"`
	CompanyAddressID   uuid.UUID `json:"companyAddressID"`
	Name               string    `json:"name"`
	PhoneNumber        string    `json:"phoneNumber"`
	ID_2               int64     `json:"id2"`
	CompanyAddressID_2 uuid.UUID `json:"companyAddressID2"`
	PostalCode         string    `json:"postalCode"`
	Street             string    `json:"street"`
	Number             string    `json:"number"`
	AddressComplement  string    `json:"addressComplement"`
	Neighbourhood      string    `json:"neighbourhood"`
	City               string    `json:"city"`
	State              string    `json:"state"`
}

func (q *Queries) GetCompanyDetailsByID(ctx context.Context, companyID uuid.UUID) (GetCompanyDetailsByIDRow, error) {
	row := q.queryRow(ctx, q.getCompanyDetailsByIDStmt, getCompanyDetailsByID, companyID)
	var i GetCompanyDetailsByIDRow
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.CompanyAddressID,
		&i.Name,
		&i.PhoneNumber,
		&i.ID_2,
		&i.CompanyAddressID_2,
		&i.PostalCode,
		&i.Street,
		&i.Number,
		&i.AddressComplement,
		&i.Neighbourhood,
		&i.City,
		&i.State,
	)
	return i, err
}

const listCompanies = `-- name: ListCompanies :many
SELECT id, company_id, company_address_id, name, phone_number
FROM companies
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListCompaniesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCompanies(ctx context.Context, arg ListCompaniesParams) ([]Companies, error) {
	rows, err := q.query(ctx, q.listCompaniesStmt, listCompanies, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Companies{}
	for rows.Next() {
		var i Companies
		if err := rows.Scan(
			&i.ID,
			&i.CompanyID,
			&i.CompanyAddressID,
			&i.Name,
			&i.PhoneNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCompaniesDetails = `-- name: ListCompaniesDetails :many
SELECT c.id, company_id, c.company_address_id, name, phone_number, ca.id, ca.company_address_id, postal_code, street, number, address_complement, neighbourhood, city, state
FROM companies c
         INNER JOIN company_addresses ca
                    ON c.company_address_id = ca.company_address_id
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListCompaniesDetailsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListCompaniesDetailsRow struct {
	ID                 int64     `json:"id"`
	CompanyID          uuid.UUID `json:"companyID"`
	CompanyAddressID   uuid.UUID `json:"companyAddressID"`
	Name               string    `json:"name"`
	PhoneNumber        string    `json:"phoneNumber"`
	ID_2               int64     `json:"id2"`
	CompanyAddressID_2 uuid.UUID `json:"companyAddressID2"`
	PostalCode         string    `json:"postalCode"`
	Street             string    `json:"street"`
	Number             string    `json:"number"`
	AddressComplement  string    `json:"addressComplement"`
	Neighbourhood      string    `json:"neighbourhood"`
	City               string    `json:"city"`
	State              string    `json:"state"`
}

func (q *Queries) ListCompaniesDetails(ctx context.Context, arg ListCompaniesDetailsParams) ([]ListCompaniesDetailsRow, error) {
	rows, err := q.query(ctx, q.listCompaniesDetailsStmt, listCompaniesDetails, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListCompaniesDetailsRow{}
	for rows.Next() {
		var i ListCompaniesDetailsRow
		if err := rows.Scan(
			&i.ID,
			&i.CompanyID,
			&i.CompanyAddressID,
			&i.Name,
			&i.PhoneNumber,
			&i.ID_2,
			&i.CompanyAddressID_2,
			&i.PostalCode,
			&i.Street,
			&i.Number,
			&i.AddressComplement,
			&i.Neighbourhood,
			&i.City,
			&i.State,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCompany = `-- name: UpdateCompany :one
UPDATE companies
SET (company_address_id,
     name,
     phone_number) = (
                      $2, $3, $4
    )
WHERE company_id = $1
RETURNING id, company_id, company_address_id, name, phone_number
`

type UpdateCompanyParams struct {
	CompanyID        uuid.UUID `json:"companyID"`
	CompanyAddressID uuid.UUID `json:"companyAddressID"`
	Name             string    `json:"name"`
	PhoneNumber      string    `json:"phoneNumber"`
}

func (q *Queries) UpdateCompany(ctx context.Context, arg UpdateCompanyParams) (Companies, error) {
	row := q.queryRow(ctx, q.updateCompanyStmt, updateCompany,
		arg.CompanyID,
		arg.CompanyAddressID,
		arg.Name,
		arg.PhoneNumber,
	)
	var i Companies
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.CompanyAddressID,
		&i.Name,
		&i.PhoneNumber,
	)
	return i, err
}

const updateCompanyAddress = `-- name: UpdateCompanyAddress :one
UPDATE company_addresses
SET postal_code        = $2,
    street             = $3,
    number             = $4,
    address_complement = $5,
    neighbourhood      = $6,
    city               = $7,
    state              = $8
WHERE company_address_id = $1
RETURNING id, company_address_id, postal_code, street, number, address_complement, neighbourhood, city, state
`

type UpdateCompanyAddressParams struct {
	CompanyAddressID  uuid.UUID `json:"companyAddressID"`
	PostalCode        string    `json:"postalCode"`
	Street            string    `json:"street"`
	Number            string    `json:"number"`
	AddressComplement string    `json:"addressComplement"`
	Neighbourhood     string    `json:"neighbourhood"`
	City              string    `json:"city"`
	State             string    `json:"state"`
}

func (q *Queries) UpdateCompanyAddress(ctx context.Context, arg UpdateCompanyAddressParams) (CompanyAddresses, error) {
	row := q.queryRow(ctx, q.updateCompanyAddressStmt, updateCompanyAddress,
		arg.CompanyAddressID,
		arg.PostalCode,
		arg.Street,
		arg.Number,
		arg.AddressComplement,
		arg.Neighbourhood,
		arg.City,
		arg.State,
	)
	var i CompanyAddresses
	err := row.Scan(
		&i.ID,
		&i.CompanyAddressID,
		&i.PostalCode,
		&i.Street,
		&i.Number,
		&i.AddressComplement,
		&i.Neighbourhood,
		&i.City,
		&i.State,
	)
	return i, err
}
