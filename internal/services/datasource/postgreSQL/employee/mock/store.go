// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Pietroski/quero2-backend-technical-test/internal/services/datasource/postgreSQL/employee (interfaces: Store)

// Package mockdbemployee is a generated GoMock package.
package mockdbemployee

import (
	context "context"
	reflect "reflect"

	employee "github.com/Pietroski/quero2-backend-technical-test/internal/services/datasource/postgreSQL/employee"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateEmployee mocks base method.
func (m *MockStore) CreateEmployee(arg0 context.Context, arg1 employee.CreateEmployeeParams) (employee.Employees, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmployee", arg0, arg1)
	ret0, _ := ret[0].(employee.Employees)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmployee indicates an expected call of CreateEmployee.
func (mr *MockStoreMockRecorder) CreateEmployee(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmployee", reflect.TypeOf((*MockStore)(nil).CreateEmployee), arg0, arg1)
}

// DeleteEmployee mocks base method.
func (m *MockStore) DeleteEmployee(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmployee", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEmployee indicates an expected call of DeleteEmployee.
func (mr *MockStoreMockRecorder) DeleteEmployee(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmployee", reflect.TypeOf((*MockStore)(nil).DeleteEmployee), arg0, arg1)
}

// GetEmployee mocks base method.
func (m *MockStore) GetEmployee(arg0 context.Context, arg1 uuid.UUID) (employee.Employees, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployee", arg0, arg1)
	ret0, _ := ret[0].(employee.Employees)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployee indicates an expected call of GetEmployee.
func (mr *MockStoreMockRecorder) GetEmployee(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployee", reflect.TypeOf((*MockStore)(nil).GetEmployee), arg0, arg1)
}

// ListAllEmployees mocks base method.
func (m *MockStore) ListAllEmployees(arg0 context.Context) ([]employee.Employees, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllEmployees", arg0)
	ret0, _ := ret[0].([]employee.Employees)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllEmployees indicates an expected call of ListAllEmployees.
func (mr *MockStoreMockRecorder) ListAllEmployees(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllEmployees", reflect.TypeOf((*MockStore)(nil).ListAllEmployees), arg0)
}

// ListPaginatedEmployees mocks base method.
func (m *MockStore) ListPaginatedEmployees(arg0 context.Context, arg1 employee.ListPaginatedEmployeesParams) ([]employee.Employees, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPaginatedEmployees", arg0, arg1)
	ret0, _ := ret[0].([]employee.Employees)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPaginatedEmployees indicates an expected call of ListPaginatedEmployees.
func (mr *MockStoreMockRecorder) ListPaginatedEmployees(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPaginatedEmployees", reflect.TypeOf((*MockStore)(nil).ListPaginatedEmployees), arg0, arg1)
}
